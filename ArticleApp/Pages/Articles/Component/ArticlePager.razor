@using Dul.Web;
<div class="d-flex">
	<ul class="pagination pagination-sm mx-auto">
		@*맨 처음으로*@
		@if (Model.PageNumber == 1)
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">First</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(1))"><span style="font-size:7pt;">First</span></a>
			</li>
		}

		@*이전*@
		@if (Model.PageNumber > 1)
		{
			int prev = Model.PageNumber - 1;
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(prev))"><span style="font-size:7pt;">Prev</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">Prev</span></a>
			</li>
		}

		@*이전 버튼 3개*@
		@if (Model.PageNumber > Model.PagerButtonCount)
		{
			int prev = (Model.PageNumber - 1) / (int)Model.PagerButtonCount * Model.PagerButtonCount;
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(prev))"><span style="font-size:7pt;">-@Model.PagerButtonCount</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">-@Model.PagerButtonCount</span></a>
			</li>
		}

		@{
			int i = 0;
			int start = (Model.PageIndex / (int)Model.PagerButtonCount * Model.PagerButtonCount) + 1;
			int end = (Model.PageIndex / (int)Model.PagerButtonCount + 1) * Model.PagerButtonCount;

			for (i = start; i <= end; i++)
			{
				var currentNumber = i;
				if (i > Model.PageCount)
					break;

				if (i == Model.PageNumber)
				{
					<li class="page-item active">
						<a class="page-link disabled"><span style="font-size:7pt;">@i</span></a>
					</li>
				}
				else
				{
					<li class="page-item">
						<a class="page-link" @onclick="(() => PagerButtonClicked(currentNumber))"><span style="font-size:7pt;">@i</span></a>
					</li>
				}
			}

		}

		@*다음 버튼 3개*@
		@if (i <= Model.PageCount)
		{
			int next = (Model.PageIndex / (int)Model.PagerButtonCount * Model.PagerButtonCount + Model.PagerButtonCount) + 1;
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(next))"><span style="font-size:7pt;">@Model.PagerButtonCount+</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">@Model.PagerButtonCount+</span></a>
			</li>
		}

		@*다음*@
		@if (Model.PageNumber < Model.PageCount)
		{
			int next = Model.PageNumber + 1;
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(next))"><span style="font-size:7pt;">Next</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">Next</span></a>
			</li>
		}

		@*맨 뒤로*@
		@if (Model.PageNumber == Model.PageCount)
		{
			<li class="page-item">
				<a class="page-link disabled"><span style="font-size:7pt;">Last</span></a>
			</li>
		}
		else
		{
			<li class="page-item">
				<a class="page-link" @onclick="(() => PagerButtonClicked(Model.PageCount))"><span style="font-size:7pt;">Last</span></a>
			</li>
		}
	</ul>
</div>

@code {
	// 부모로부터 모든 페이저 관련된 정보가 담긴 PagerBase 개체 받음
	[Parameter]
	public PagerBase Model { get; set; }

	// Parameter가 넘어오면 자동으로 PagerBase.PageCount 계산
	protected override Task OnParametersSetAsync()
	{
		Model.PageCount = Convert.ToInt32(Math.Ceiling(Model.RecordCount / (double)Model.PageSize));

		return base.OnParametersSetAsync();
	}

	// 부모의 콜백 메서드를 PageIndexChanged 대리자로 받음
	[Parameter]
	public EventCallback<int> PageIndexChanged { get; set; }

	// Pager 버튼 클릭할 때 현재 클릭한 페이지 번호를 받아서 부모에게 전달
	private async void PagerButtonClicked(int pageNumber)
	{
		Model.PageNumber = pageNumber;
		Model.PageIndex = pageNumber - 1;

		await PageIndexChanged.InvokeAsync(Model.PageIndex);
	}
}
@page "/Articles/Manage"

@inject IArticleRepository ArticleRepository
@inject IJSRuntime JSRunTime

@using Dul.Domain.Common;
@using Dul.Web

<h3>Manage</h3>


<div>
	<a href="/Articles/Create" class="btn btn-primary">Create</a>
</div>

@if (articles == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table table-bordered table-striped table-hover">
		<thead class="table-light">
			<tr>
				<th>ID</th>
				<th>Title</th>
				<th>Created</th>
				<th>&nbsp;</th>
				<th>IsPinned</th>
				<th>&nbsp;</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var article in articles)
			{
				<tr>
					<td>@article.Id</td>
					<td>@article.Title</td>
					<td>@article.Created.ToShortTimeString()</td>
					<td>
						<a href="/Articles/Details/@article.Id" class="btn btn-light">Details</a>
						<a href="/Articles/Edit/@article.Id" class="btn btn-light">Edit</a>
						<a href="/Articles/Delete/@article.Id" class="btn btn-danger">Delete</a>
					</td>
					<td>@(article.IsPinned? "공지" : "")</td>
					<td>
						<input type="button" value="공지글로 올리기" class="btn btn-light" @onclick="(() => PinnedBy(article))"></input>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

<ArticleApp.Pages.Articles.Component.ArticlePager Model="pagerBase" PageIndexChanged="PageIndexChanged"></ArticleApp.Pages.Articles.Component.ArticlePager>

@if (isShow)
{
	<div class="modal fade show d-block" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">공지글로 올리기</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="btnClose_Click"></button>
				</div>
				<div class="modal-body">
					<p>@(_article.Id)번 글을 공지글로 설정할까요?</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" @onclick="btnTogglePinned_Click">설정</button>
					<button type="button" class="btn btn-secondary" @onclick="btnClose_Click">닫기</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private Article _article = new Article();   // 선택한 항목 관리

	private bool isShow = false;    // Notice Modal

	private void PinnedBy(Article article)
	{
		_article = article;
		isShow = true;  // 창 열기
						//JSRunTime.InvokeAsync<object>("alert", $"{article.Id}를 공지글로 설정합니다.");
	}

	private void btnClose_Click()
	{
		isShow = false; // 창 닫기
		_article = new Article();   // 선택했던 모델 초기화
	}

	private async void btnTogglePinned_Click()
	{
		_article.IsPinned = !_article.IsPinned; // Toggle
		await ArticleRepository.EditArticleAsync(_article);
		isShow = false;

		PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pagerBase.PageIndex, pagerBase.PageSize);
		pagerBase.RecordCount = pagingData.TotalRecords;    // 총 레코드 수
		articles = pagingData.Records.ToList(); // 페이징 처리된 레코드
		StateHasChanged();  // 현재 컴포넌트 재로드
	}

	// 페이저 기본값 설정
	PagerBase pagerBase = new PagerBase()
		{
			PageNumber = 1,
			PageIndex = 0,
			PageSize = 2,
			PageCount = 5,
			PagerButtonCount = 3,
		};

	private List<Article> articles;

	protected override async Task OnInitializedAsync()
	{
		//[1] 전체 데이터 모두 출력
		//articles = await ArticleRepository.GetArticlesAsync();

		//[2] 페이징 처리된 데이터만 출력
		PagingResult<Article> pagingData = await ArticleRepository.GetAllAsync(pagerBase.PageIndex, pagerBase.PageSize);
		pagerBase.RecordCount = pagingData.TotalRecords;    // 총 레코드 수
		articles = pagingData.Records.ToList(); // 페이징 처리된 레코드
	}

	// Pager 버튼 클릭 콜백 메서드
	private async void PageIndexChanged(int PageIndex)
	{
		pagerBase.PageIndex = PageIndex;
		pagerBase.PageNumber = PageIndex + 1;

		var pagingData = await ArticleRepository.GetAllAsync(pagerBase.PageIndex, pagerBase.PageSize);
		pagerBase.RecordCount = pagingData.TotalRecords;    // 총 레코드 수
		articles = pagingData.Records.ToList(); // 페이징 처리된 레코드
		StateHasChanged();  // 현재 컴포넌트 재로드
	}
}

